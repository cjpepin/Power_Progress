{"version":3,"sources":["pages/login.js","pages/register.js","pages/charts.component.js","components/navbar.component.js","pages/dashboard.js","pages/example.charts.js","pages/example.js","pages/blocks.js","pages/accessoryCharts.component.js","pages/block.js","pages/programSheet.js","App.js","reportWebVitals.js","index.js"],"names":["App","useState","email","setEmail","password","setPassword","event","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","data","user","localStorage","setItem","name","window","location","href","alert","console","log","class","onSubmit","value","onChange","e","target","type","placeholder","onClick","navigate","useNavigate","setName","status","chartlbsorkg","getItem","liftData","setLiftData","plateMath","weight","rpe","reps","rpeArr","Object","e1rm","parseInt","Math","round","block","req","error","toKG","toLB","useEffect","getLiftCharts","id","style","display","gridTemplateColumns","width","height","marginLeft","marginRight","liftArr","chartsArr","document","getElementById","key","dates","hasOwnProperty","curLift","lift","includes","push","date","lbsorkg","curData","labels","datasets","label","backgroundColor","borderColor","color","fill","borderWidth","createCharts","Navbar","as","Link","to","clear","Component","Dashboard","React","ReactFromModule","removeItem","setTotData","updateTable","firstNode","childNodes","length","removeChild","firstChild","i","weightInKg","e1rmInKg","weightInLbs","e1rmInLbs","innerHTML","getLifts","squatDates","squatData","benchDates","benchData","deadliftDates","deadliftData","createData","thisData","readOnly","defaultValue","step","token","jwt","verify","row","closest","ComplexData","blockName","setBlockName","blockUrl","setBlockUrl","totData","blocks","blockList","blockDiv","curBlock","newBlock","createElement","sheetURL","prepend","decoded","reload","populateBlocks","AccessoryCharts","Block","setLift","setWeight","setLbsorkg","setReps","sets","setSets","setRpe","setDate","note","setNote","download","blob","Blob","url","URL","createObjectURL","setAttribute","appendChild","click","delData","curDate","noteServ","newNote","parseData","csvRows","keys","join","values","map","header","escaped","replace","rpeReps","updateNote","getNote","open","whiteSpace","marginTop","blockNoteIn","blockNoteShow","prevText","onKeyDown","tempDate","querySelector","textContent","deleteLift","cells","justifyContent","changeLborKg","className","jRef","useRef","numRows","setNumRows","numCols","setNumCols","setData","getSheet","sheetData","newData","parse","options","minDimensions","current","jspreadsheet","jexcel","getData","createLift","addLiftToLibrary","insertRow","insertColumn","deleteRow","deleteColumn","setsArr","repsArr","lbsorkgArr","weightArr","datesArr","curLiftArr","curRow","getRowData","j","curSets","curReps","curWeight","curRPE","curLbsorKg","getCell","ref","path","exact","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e060c237.chunk.js","sourcesContent":["import {BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\nimport React, { useState } from 'react';\n\n\nfunction App() {\n\n  const[email, setEmail] = useState('')\n  const[password, setPassword] = useState('')\n\n  async function registerUser(event) {\n    event.preventDefault();\n\n    const response = await fetch('https://powerprogress.herokuapp.com/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n    })\n\n    const data = await response.json()\n    if(data.user) {\n      localStorage.setItem('token', data.user)\n      localStorage.setItem('name', data.name)\n      // alert('Login successful')\n      window.location.href = '/dashboard'\n    } else {\n      alert('Please check your username and password')\n    }\n    console.log(data)\n  }\n\n  function examplePage() {\n    window.location.href = '/example'\n  }\n  function registerNewUser(){\n    window.location.href = '/register'\n  }\n\n\n\n  return (\n    \n    <div>\n      <h1>Login</h1>\n      <form class=\"form-inline\" onSubmit={registerUser}>\n        <br />\n        <div class=\"form-group\">\n        <input \n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <input \n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input type=\"submit\" value=\"Login\"/>\n        </div>\n      </form>\n       <input type=\"submit\" value=\"See Example Data\" onClick={examplePage}/>\n      <input type=\"submit\" value=\"Register\" onClick={registerNewUser}/>\n\n    </div>\n    \n  );\n}\n\nexport default App;\n","\n// import {BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction App() {\n  const navigate = useNavigate()\n\n  const[name, setName] = useState('')\n  const[email, setEmail] = useState('')\n  const[password, setPassword] = useState('')\n\n  async function registerUser(event) {\n    event.preventDefault();\n\n    const response = await fetch('https://powerprogress.herokuapp.com/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n      }),\n    })\n\n    const data = await response.json()\n    console.log(data.status)\n    if(data.status === 'good'){\n      navigate('/login')\n    }\n  }\n  function returnToLogin(){\n    window.location.href = '/login'\n  }\n\n\n  return (\n    \n    <div>\n      <h1>Register</h1>\n      <form onSubmit={registerUser}>\n      <input \n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n          placeholder=\"Name\"\n        />\n        <br />\n        <input \n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <br />\n        <input \n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      \n        <input type=\"submit\" value=\"Register\"/>\n      </form>\n      <button onClick={returnToLogin}>Return To Login</button>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2'\nimport Chart from 'chart.js/auto';\nimport { useState, useEffect } from 'react';\n\n\nfunction App(){\n    // let liftData = [];\n    let squatDates = [];\n    let squatData = [];\n    let benchDates = [];\n    let benchData = [];\n    let deadliftDates = [];\n    let deadliftData = [];\n    let chartlbsorkg = localStorage.getItem('lborkg');\n    const [liftData, setLiftData] = useState('')\n    function plateMath(weight, rpe, reps){\n        const rpeArr = new Object;\n              rpeArr[\"10\"] = 1;\n              rpeArr[\"9.5\"] = 0.978;\n              rpeArr[\"9\"] = 0.955;\n              rpeArr[\"8.5\"] = 0.939;\n              rpeArr[\"8\"] = 0.922;\n              rpeArr[\"7.5\"] = 0.907;\n              rpeArr[\"7\"] = 0.892;\n              rpeArr[\"6.5\"] = 0.878;\n              rpeArr[\"6\"] = 0.863;\n              rpeArr[\"5.5\"] = 0.848;\n              rpeArr[\"5\"] = 0.834;\n\n        const rpeReps = (10 - parseInt(rpe));\n        const totReps = (+rpeReps + +reps);\n        let diffQ = ((100 - (totReps*2.5))/100);\n        let e1rm = weight/diffQ;\n        e1rm = Math.round(e1rm * 100)/100;\n        return e1rm;\n      }\n  //Gets data for lift charts\n    async function getLiftCharts() {\n        console.log(\"charts test\")\n        let block;\n        if(localStorage.getItem('block')){\n            block = localStorage.getItem('block');\n        } else {\n            block = '';\n        }\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n                'block': block,\n            }\n        })\n\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"setting lift data\")\n            setLiftData(data.data, []);\n        } else {\n            alert(data.error + \"loc1\")\n        }\n       \n    }\n    function toKG(weight){\n        return weight/2.2;\n    }\n    function toLB(weight){\n        return weight*2.2;\n    }\n    //Takes the data gotten and puts it into respective arrays\n    function createData(data){\n        \n        for(let i = 0; i < liftData.length; i++){\n            let curWeight;\n            console.log(liftData[i].lift)\n            // console.log(liftData[i]);\n            if(chartlbsorkg == 'lb'){\n                if(liftData[i].lbsorkg == \"kg\"){\n                    curWeight = toLB(liftData[i].weight);\n                    if(liftData[i].lift == \"Competition Squat\"){\n                        squatDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        squatData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Bench\"){\n                        console.log(\"WE here\")\n                        benchDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        benchData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Deadlift\"){\n                        deadliftDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        deadliftData.push(parseInt(cure1rm));\n                    }\n                } else{\n                    curWeight = liftData[i].weight\n                    if(liftData[i].lift == \"Competition Squat\"){\n                        squatDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        squatData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Bench\"){\n                        console.log(\"WE here\")\n                        benchDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        benchData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Deadlift\"){\n                        deadliftDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        deadliftData.push(parseInt(cure1rm));\n                    }\n                }\n            } else{\n                if(liftData[i].lbsorkg == \"lb\"){\n                    curWeight = toKG(liftData[i].weight);\n                    if(liftData[i].lift == \"Competition Squat\"){\n                        squatDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        squatData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Bench\"){\n                        console.log(\"WE here\")\n                        benchDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        benchData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Deadlift\"){\n                        deadliftDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        deadliftData.push(parseInt(cure1rm));\n                    }\n                } else{\n                    curWeight = liftData[i].weight\n                    if(liftData[i].lift == \"Competition Squat\"){\n                        squatDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        squatData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Bench\"){\n                        console.log(\"WE here\")\n                        benchDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        benchData.push(parseInt(cure1rm));\n                    } else if(liftData[i].lift == \"Competition Deadlift\"){\n                        deadliftDates.push(liftData[i].date);\n                        let cure1rm = plateMath(curWeight, liftData[i].rpe, liftData[i].reps);\n                        deadliftData.push(parseInt(cure1rm));\n                    }\n                }\n            }\n       \n        }\n    }\n    function createCharts(data){\n        let liftArr = []\n        let chartDiv = document.getElementById('accessoryCharts')\n        \n       \n        let e1rm;\n        let chartsArr = [];\n       \n        for(const key in data){\n            let liftData = [];\n            let dates = [];\n            if(data.hasOwnProperty(key)){\n                let curLift = data[key].lift\n                if(curLift == \"Competition Squat\" || curLift == \"Competition Bench\" || curLift == \"Competition Deadlift\"){\n                    if(!(liftArr.includes(curLift))){\n                        liftArr.push(curLift)\n                        for(const lift in data){\n                            let curWeight;\n                            if(data.hasOwnProperty(lift)){\n                                let compareLift = data[lift].lift\n                                if(compareLift == curLift){\n                                    if(dates.includes(data[lift].date)){\n                                        continue;\n                                    }\n                                    if(chartlbsorkg == 'lb'){\n                                        if(data[lift].lbsorkg == \"kg\"){\n                                            curWeight = toLB(data[lift].weight);\n                                            e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                            liftData.push(e1rm)\n                                            dates.push(data[lift].date) \n                                        }else {\n                                            curWeight = data[lift].weight;\n                                            e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                            liftData.push(e1rm)\n                                            dates.push(data[lift].date) \n                                        }\n                                    } else {\n                                        if(data[lift].lbsorkg == \"lb\"){\n                                            curWeight = toKG(data[lift].weight);\n                                            e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                            liftData.push(e1rm)\n                                            dates.push(data[lift].date) \n                                        }else {\n                                            curWeight = data[lift].weight;\n                                            e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                            liftData.push(e1rm)\n                                            dates.push(data[lift].date) \n                                    }     \n                                }\n                            }\n                        }\n                        }\n                        const curData = {\n                            labels: dates,\n                            datasets: [{\n                                label: curLift,\n                                data:  liftData,\n                                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                                borderColor: 'rgba(81, 163, 0, 1)',\n                                color: 'rgba(239, 0, 0, 1)',\n                                fill: false,\n                                borderWidth: 1\n                            }]\n                        };  \n                        chartsArr.push(<div><Line class=\"col-xs-6\" data={curData}/></div>)\n                        }\n                }\n                \n                }\n            }\n            return chartsArr;\n        }\n\n    //gets the data every time the page relaods\n    useEffect(() => {\n        getLiftCharts();\n      }, []);\n        return (\n            <div id=\"accessoryCharts\"style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\",width: \"90vw\", height: \"60vh\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                {createCharts(liftData)}\n            </div>\n\n        );\n}\nexport default App;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\n\nexport default class Navbar extends Component{\n    \n    render() {\n        function logout(){\n            window.localStorage.clear();\n            console.log(\"Made it here\")\n            window.location.href('/login');\n        }\n        return (\n            <nav class=\"navbar navbar-inverse\">\n                <div class=\"container-fluid\">\n                    <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <span class=\"navbar-brand\">Power Tracker</span>\n                    </div>\n                    <div class=\"collapse navbar-collapse\" id=\"myNavbar\">\n                    <ul class=\"nav navbar-nav\">\n                        <li ><Link as={Link} to=\"/dashboard\">All Time Data</Link></li>\n                        <li><Link as={Link} to=\"/blocks\">Blocks</Link> </li>\n                        <li><Link as={Link} to=\"/programSheet\">Program Spreadsheet</Link></li>\n                        <li><a href=\"#\">Page 3</a></li>\n                    </ul>\n                    <ul class=\"nav navbar-nav navbar-right\">\n                        <li ><Link as={Link} to={\"/login\"} onClick={logout}><span class=\"glyphicon glyphicon-user\"></span> Log Out</Link></li>\n                        {/* <li><a href=\"#\"><span class=\"glyphicon glyphicon-log-in\"></span> Login</a></li> */}\n                    </ul>\n                    </div>\n                </div>\n            </nav>\n        );\n\n    }\n\n\n\n}","import React, { ReactFromModule, useEffect } from 'react'\nimport jwt from 'jsonwebtoken'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { useState, useRef } from 'react';\nimport Charts from './charts.component';\nimport Navbar from '../components/navbar.component'\nexport { default as ReactFromModule } from 'react'\n\nconst Dashboard = () => {\n    console.log(React)\n    console.log(ReactFromModule) \n    if(localStorage.getItem('block')){\n        localStorage.removeItem('block');\n        console.log(\"block removed\")\n    }\n    const name = localStorage.getItem('name');\n    const [lift, setLift] = useState('squat');\n    const [weight, setWeight] = useState('');\n    const [lbsorkg, setLbsorkg] = useState('lb');\n    const [reps, setReps] = useState('');\n    const [rpe, setRpe] = useState('');\n    const [date, setDate] = useState('');\n    const [totData, setTotData] = useState('');\n\n    function plateMath(){\n      const rpeArr = new Object;\n            rpeArr[\"10\"] = 1;\n            rpeArr[\"9.5\"] = 0.978;\n            rpeArr[\"9\"] = 0.955;\n            rpeArr[\"8.5\"] = 0.939;\n            rpeArr[\"8\"] = 0.922;\n            rpeArr[\"7.5\"] = 0.907;\n            rpeArr[\"7\"] = 0.892;\n            rpeArr[\"6.5\"] = 0.878;\n            rpeArr[\"6\"] = 0.863;\n            rpeArr[\"5.5\"] = 0.848;\n            rpeArr[\"5\"] = 0.834;\n      console.log(rpe);\n      if(rpe > 10 || rpe < 5){\n        alert(\"put in a real rpe!\");\n        return;\n      }\n      const rpeReps = (10 - parseInt(rpe));\n      const totReps = (+rpeReps + +reps);\n      let diffQ = ((100 - (totReps*2.5))/100);\n      let e1rm = weight/diffQ;\n      e1rm = Math.round(e1rm * 100)/100;\n      return e1rm;\n    }\n    function updateTable(data){\n      console.log(data)\n      const liftData = data.data;\n      console.log(liftData);\n      const entries = []\n      let firstNode = document.getElementById('liftData');\n        while (firstNode.childNodes.length > 1) {\n          firstNode.removeChild(firstNode.firstChild);\n        }\n        let weight;\n        let e1rm;\n      for(let i = 0; i < liftData.length; i++){\n        \n        if(liftData[i]['lbsorkg'] == 'lb'){\n          weight = parseInt(liftData[i]['weight']);\n          let weightInKg = weight / 2.2;\n          weight = Math.round(weightInKg*100)/100 + 'kg/' + Math.round(weight*100)/100 + 'lbs';\n\n          e1rm = parseInt(liftData[i]['e1rm']);\n          let e1rmInKg = e1rm/2.2;\n          e1rm = Math.round(e1rmInKg*100)/100 + 'kg/' + Math.round(e1rm*100)/100 + 'lbs';\n\n        } else if(liftData[i]['lbsorkg'] == 'kg'){\n          weight = parseInt(liftData[i]['weight'])\n          let weightInLbs = weight * 2.2\n          weight = Math.round(weight*100)/100 + 'kg/' + Math.round(weightInLbs*100)/100 + 'lbs'\n\n          e1rm = parseInt(liftData[i]['e1rm']);\n          let e1rmInLbs = e1rm/2.2;\n          e1rm = Math.round(e1rm*100)/100 + 'kg/' + Math.round(e1rmInLbs*100)/100 + 'lbs';\n        }\n        firstNode.innerHTML += `\n        <tr id=${i}>\n          <td id=\"block\">${liftData[i]['block']}</td>\n          <td id=\"date\">${liftData[i]['date']}</td>\n          <td id=\"lift\">${liftData[i]['lift']}</td>\n          <td id=\"weight\">${weight}</td>\n          <td id=\"rpe\">${liftData[i]['rpe']}</td>\n          <td id=\"reps\">${liftData[i]['reps']}</td>\n          <td id=\"e1rm\">${e1rm}</td>\n        </tr>\n        `\n      }\n    }\n\n    function clearTable(){\n        \n    }\n  \n    async function createLift() {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        console.log(lbsorkg);\n        let e1rm = plateMath();\n        if(lbsorkg == ''){\n          lbsorkg = 'lb';\n        }\n        const response = await fetch('https://powerprogress.herokuapp.com/api/new_lift', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email,\n            lift,\n            weight,\n            lbsorkg,\n            reps,\n            rpe,\n            date,\n            e1rm,\n          }),\n        })\n    \n        const data = await response.json();\n        // alert(data.status);\n        if(data.status === 'good' || data.status === 'fine' ){\n          alert('Lift added');\n          getLifts();\n          alert('reloading window');\n          window.location.reload();\n        } else{\n          alert(\"Make sure all fields are filled out\");\n        }\n      }\n    const download = function(data){\n        const blob = new Blob([data], {type: 'text/csv'});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', 'liftdata.csv');\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n  \n      }\n    function parseData(data){\n      const csvRows = [];\n      const headers = Object.keys(data[0]);\n      csvRows.push(headers.join(','));\n\n      for(const row of data){\n        const values = headers.map(header => {\n          const escaped = (''+row[header]).replace(/\"/g,'\\\\\"');\n          return `${escaped}`\n        });\n      csvRows.push(values.join(','));\n      }\n      return csvRows.join('\\n','');\n    }\n    async function toCSV() {\n      const req = await fetch('https://powerprogress.herokuapp.com/api/getCSV', {\n        headers: {\n            'x-access-token': localStorage.getItem('token')\n        }\n\n    })\n    const data = await req.json();\n    if(data.status === 'fine'){\n      console.log(data.data.data)\n      if(data.data.data == ''){\n        alert(\"You don't have any data\");\n        return;\n      }\n      console.log(parseData(data.data.data));\n      download(parseData(data.data.data));\n      \n  } else {\n      alert(data.error + \"test\")\n  }\n    }\n\n    async function getLifts() {\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token')\n            }\n        \n        })\n\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"creating list\");\n            console.log(data.data);\n            clearTable();\n            updateTable(data);\n            setTotData(data.data, []);\n        } else {\n            alert(data.error + \"test\")\n        }\n       \n    }\n  \n\n    \n    useEffect(() => {\n      getLifts();\n      console.log(lbsorkg);\n    }, []);\n\n  \n\n  // function getAllExercises() {\n  //   const req = await fetch('https://powerprogress.herokuapp.com/api/get_all', {\n  //           headers: {\n  //               'x-access-token': localStorage.getItem('token')\n  //           }\n  //       })\n\n  //       const data = await req.json();\n  //       if(data.status === 'fine'){\n  //           console.log(\"creating list\");\n  //           console.log(data.data);\n  //           clearTable();\n  //           updateTable(data);\n  //           setTotData(data, []);\n  //           // setWeight(data.data.weight);\n  //           // setLbsorkg(data.data.lbsorkg);\n  //           // setReps(data.data.reps);\n  //           // setRpe(data.data.rpe);\n  //           // setDate(data.data.date);\n  //       } else {\n  //           alert(data.error + \"test\")\n  //       }\n  // }\n\n  function logout(){\n    window.localStorage.clear();\n    window.location.href = '/login';\n  }\n\n    return (\n        <div>\n          <Navbar />\n          <div>\n            <h1>Welcome {name}</h1>\n  \n          </div>\n          \n            <table class=\"table\" id=\"dataTable\">\n              <thead>\n                <tr>\n                  <th>Block</th>\n                  <th>Date</th>\n                  <th>Lift</th>\n                  <th>Weight</th>\n                  <th>Rpe</th>\n                  <th>Reps</th>\n                  <th>Estimated 1rm</th>\n                </tr>\n              </thead>\n              <tbody id=\"liftData\">\n\n              </tbody>\n              <tbody id='startHere'>\n\n              </tbody>\n            </table>\n            <br />\n            <div>\n              <Charts />\n            </div>\n           \n            \n        </div>\n    )\n}\nexport default Dashboard","import React from 'react';\nimport { Line } from 'react-chartjs-2'\nimport Chart from 'chart.js/auto';\nimport { useState, useEffect } from 'react';\n\n\nfunction App(){\n    // let liftData = [];\n    let squatDates = [];\n    let squatData = [];\n    let benchDates = [];\n    let benchData = [];\n    let deadliftDates = [];\n    let deadliftData = [];\n    const [liftData, setLiftData] = useState('')\n\n  \n    async function getLiftCharts() {\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token')\n            }\n        })\n\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"setting lift data\")\n            setLiftData(data.data, []);\n        } else {\n            alert(data.error + \"loc1\")\n        }\n       \n    }\n    function createData(data){\n        for(let i = 0; i < liftData.length; i++){\n            // console.log(liftData[i]);\n            if(liftData[i].lift == \"squat\"){\n                squatDates.push(liftData[i].date);\n                squatData.push(parseInt(liftData[i].weight));\n            } else if(liftData[i].lift == \"bench\"){\n                benchDates.push(liftData[i].date);\n                benchData.push(parseInt(liftData[i].weight));\n            } else if(liftData[i].lift == \"deadlift\"){\n                deadliftDates.push(liftData[i].date);\n                deadliftData.push(parseInt(liftData[i].weight));\n            }\n       \n        }\n    }\n    if(liftData != ''){\n        createData(liftData);\n    }\n    // console.log(liftData)\n    // console.log(squatData);\n    // console.log(benchData);\n    // console.log(deadliftData);\n\n    useEffect(() => {\n        getLiftCharts();\n      }, []);\n    \n    const Sdata = {\n        labels: [\"12-01-21\",\"12-02-21\",\"12-03-21\",\"12-04-21\"],\n        datasets: [{\n            label: 'Squat',\n            data:  [180, 185, 190, 195],\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(81, 163, 0, 1)',\n            color: 'rgba(239, 0, 0, 1)',\n            fill: false,\n            borderWidth: 1\n        }]\n    };   \n    const Bdata = {\n        labels: [\"12-01-21\",\"12-02-21\",\"12-03-21\"],\n        datasets: [{\n            label: 'Bench',\n            data:  [100,105,110],\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(81, 163, 0, 1)',\n            color: 'rgba(239, 0, 0, 1)',\n            fill: false,\n            borderWidth: 1\n        }]\n    };   \n    const Ddata = {\n        labels: [\"12-01-21\",\"12-02-21\",\"12-03-21\"],\n        datasets: [{\n            label: 'Deadlift',\n            data:  [225,230,235],\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(81, 163, 0, 1)',\n            color: 'rgba(239, 0, 0, 1)',\n            fill: false,\n            borderWidth: 1\n        }]\n    };\n        return (\n            <div>\n                <Line class=\"col-xs-6\" data={Sdata}/>\n                <Line class=\"col-xs-6\" data={Bdata}/>\n                <Line class=\"col-xs-6\" data={Ddata}/>\n            </div>\n\n        );\n}\nexport default App;","import React, { useEffect } from 'react'\nimport jwt from 'jsonwebtoken'\nimport {useNavigate} from 'react-router-dom'\nimport { useState, useRef } from 'react';\nimport Charts from './example.charts';\n\n\nconst Dashboard = () => {\n    const name = localStorage.getItem('name');\n    const history = useNavigate()\n    const [lift, setLift] = useState('squat')\n    const [weight, setWeight] = useState('')\n    const [lbsorkg, setLbsorkg] = useState('lb')\n    const [reps, setReps] = useState('')\n    const [rpe, setRpe] = useState('')\n    const [date, setDate] = useState('')\n    const [totData, setTotData] = useState('')\n\n    // function plateMath(){\n    //   const rpeArr = new Object;\n    //         rpeArr[\"10\"] = 1;\n    //         rpeArr[\"9.5\"] = 0.978;\n    //         rpeArr[\"9\"] = 0.955;\n    //         rpeArr[\"8.5\"] = 0.939;\n    //         rpeArr[\"8\"] = 0.922;\n    //         rpeArr[\"7.5\"] = 0.907;\n    //         rpeArr[\"7\"] = 0.892;\n    //         rpeArr[\"6.5\"] = 0.878;\n    //         rpeArr[\"6\"] = 0.863;\n    //         rpeArr[\"5.5\"] = 0.848;\n    //         rpeArr[\"5\"] = 0.834;\n    //   console.log(rpe);\n    //   const rpeReps = (10 - parseInt(rpe));\n    //   const totReps = (+rpeReps + +reps);\n    //   let diffQ = ((100 - (totReps*2.5))/100);\n    //   let e1rm = weight/diffQ;\n    //   e1rm = Math.round(e1rm * 100)/100;\n    //   return e1rm;\n    // }\n    function updateTable(data){\n      console.log(data)\n      const liftData = data;\n      const entries = []\n      let firstNode = document.getElementById('liftData');\n        while (firstNode.childNodes.length > 1) {\n          firstNode.removeChild(firstNode.firstChild);\n        }\n      for(const key in liftData){\n        if(liftData.hasOwnProperty(key)){\n            console.log(`row ${key}`)\n            firstNode.innerHTML += `\n            <tr id=${key}>\n            <td id=\"date\">${liftData[key]['date']}</td>\n            <td id=\"lift\">${liftData[key]['lift']}</td>\n            <td id=\"weight\">${liftData[key]['weight']}</td>\n            <td id=\"rpe\">${liftData[key]['rpe']}</td>\n            <td id=\"reps\">${liftData[key]['reps']}</td>\n            <td><button id=\"delete\" class=\"deletebutton\">Delete</button></td>\n            </tr>\n            `\n        }\n      }\n    }\n\n    function clearTable(){\n        \n    }\n  \n    function createLift() {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        console.log(lbsorkg);\n        if(lbsorkg == ''){\n          lbsorkg = 'lb';\n        }\n        \n    \n        \n        // alert(data.status);\n        // if(data.status === 'good' || data.status === 'fine' ){\n        //   alert('Lift added');\n        //   getLifts();\n        //   alert('reloading window');\n        //   window.location.reload();\n        // } else{\n        //   alert(\"Make sure all fields are filled out\");\n        // }\n      }\n\n    function getLifts() {\n        let thisData = {\n                        0: {date: \"12-01-21\",\n                            lift: \"squat\",\n                            weight: \"180\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        1: {date: \"12-01-21\",\n                            lift: \"bench\",\n                            weight: \"100\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        2: {date: \"12-01-21\",\n                            lift: \"deadlift\",\n                            weight: \"225\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        3: {date: \"12-02-21\",\n                            lift: \"squat\",\n                            weight: \"185\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        4: {date: \"12-02-21\",\n                            lift: \"bench\",\n                            weight: \"105\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},  \n                        5: {date: \"12-02-21\",\n                            lift: \"deadlift\",\n                            weight: \"230\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        6: {date: \"12-03-21\",\n                            lift: \"squat\",\n                            weight: \"190\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"8\"},\n                        7: {date: \"12-03-21\",\n                            lift: \"bench\",\n                            weight: \"110\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        8: {date: \"12-03-21\",\n                            lift: \"deadlift\",\n                            weight: \"235\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"7\"},\n                        9: {date: \"12-04-21\",\n                            lift: \"squat\",\n                            weight: \"195\",\n                            lbsorkg: \"kg\",\n                            reps: \"1\",\n                            rpe: \"9.5\"}\n                        }\n            \n            clearTable();\n            updateTable(thisData);\n            setTotData(thisData, []);   \n    }\n\n    \n    useEffect(() => {\n      getLifts();\n      console.log(lbsorkg);\n    }, []);\n\n  function removeRow (e){\n\n    let row = e.target.closest(\"tr\");\n    let tbody = document.getElementById('liftData');\n    tbody.removeChild(row);\n    \n  }\n  function returnHome(){\n    window.location.href = '/login'\n  } \n\n\n\n    return (\n        <div>\n          <div>\n            <h1>Welcome Guest</h1> <input type=\"submit\" value=\"Return to Login\" onClick={returnHome}/>\n              <div class=\"col-sm-2\">\n                <input type=\"date\" readOnly/>\n              </div>\n              <div class=\"col-sm-2\">\n                <select  readOnly>\n                    <option defaultValue=\"squat\">Squat</option>\n                    <option value=\"bench\">Bench</option>\n                    <option value=\"deadlift\">Deadlift</option>\n                </select>\n                \n                <input type=\"number\" name=\"weight\" placeholder=\"How much weight?\" step=\"0.25\" readOnly/>\n                <select readOnly>\n                    <option defaultValue=\"lb\">lb</option>\n                    <option value=\"kg\">kg</option>\n                </select>\n                </div>\n                <div class=\"col-sm-2\">\n                  <input type=\"number\" name=\"reps\" placeholder=\"How many reps?\" step=\"1\"  readOnly/>\n                </div>\n                <div class=\"col-sm-2\">\n                  <input type=\"number\" name=\"rpe\" placeholder=\"What was the RPE?\" step=\"0.5\"  readOnly/>\n                </div>\n                \n                <div class=\"col-sm-2\">\n                  <input type=\"submit\" value=\"Update Lift\" onClick={createLift}/>\n              </div>\n            </div>\n          \n            <table class=\"table\" id=\"dataTable\" onClick={removeRow}>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Lift</th>\n                  <th>Weight</th>\n                  <th>Rpe</th>\n                  <th>Reps</th>\n                </tr>\n              </thead>\n              <tbody id=\"liftData\">\n\n              </tbody>\n              <tbody id='startHere'>\n\n              </tbody>\n            </table>\n            <br />\n            <div style={{display: \"grid\", width: \"40vw\", height: \"25vh\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n              <Charts />\n            </div>\n           \n            \n        </div>\n    )\n    }\nexport default Dashboard","import React, { useEffect } from 'react'\nimport { useState, useRef } from 'react';\nimport Navbar from '../components/navbar.component'\nimport jwt from 'jsonwebtoken'\n\nconst ComplexData = () => {\n    const [blockName, setBlockName] = useState('');\n    const [blockUrl, setBlockUrl] = useState('');\n    if(localStorage.getItem('block')){\n        localStorage.removeItem('block');\n        console.log(\"block removed\")\n    }\n    async function populateBlocks(){\n        \n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_blocks', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n            }\n        \n        })\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"populating blocks\");\n            let totData = data.blocks;\n            console.log(totData)\n            let blockList = [];\n            let blockDiv = document.getElementById(\"populatedBlocks\");\n            let newBlockButton = document.getElementById(\"newBlock\");\n            for(let key in totData){\n                console.log(key)\n                if(totData.hasOwnProperty(key)){\n                    let curBlock = totData[key].blockName\n                    console.log(curBlock)\n                    if(blockList.includes(curBlock)){\n                        continue;\n                    } else{\n                        blockList.push(curBlock);\n                        const newBlock = document.createElement('button');\n                        newBlock.id = totData[key.sheetURL];\n                        newBlock.value = curBlock;\n                        newBlock.innerHTML = curBlock;\n                        blockDiv.prepend(newBlock);\n                    }\n                }\n            }\n\n\n        } else {\n            alert(data.error + \"test\")\n        }\n    }\n\n    useEffect(() => {\n        populateBlocks();\n      }, []);\n\n    async function addNewBlock(e){\n        e.preventDefault();\n        // let blockName = document.getElementBy\n        localStorage.setItem('block', blockName);\n        localStorage.setItem('url', blockUrl)\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        let block = localStorage.getItem('block');\n        let sheetURL = localStorage.getItem('url');;\n        const response = await fetch('https://powerprogress.herokuapp.com/api/new_block', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            email,\n            block,\n            sheetURL,\n            }),\n        })\n\n        const data = await response.json();\n        // alert(data.status);\n        if(data.status === 'good' || data.status === 'fine' ){\n            alert('block creates');\n            window.location.reload();\n        } else{\n            alert(data.error);\n        }\n    }\n    function enterBlock(e){\n        let blockName = e.target.value;\n        if(localStorage.getItem('block') != ''){\n            localStorage.removeItem('block');\n            localStorage.setItem('block', blockName);\n            window.location.href = '/block';\n\n        } else{\n            localStorage.setItem('block', blockName);\n            window.location.href = '/block';\n\n\n        }\n    }\n  \n    async function getLifts() {\n        // let block = localStorage.getItem('block');\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n                'block': localStorage.getItem('block')\n            },\n        })\n\n        const data = await req.json();\n       \n        if(data.status === 'fine'){\n            console.log(\"creating list\");\n            console.log(data.data);\n        } else {\n            alert(data.error + \"test\")\n        }\n        \n    }\n   \n    return (\n        <div>\n            <Navbar />\n            <div id=\"blocksWrapper\">\n            <h2>Block List</h2>\n                <div id=\"populatedBlocks\" onClick={enterBlock}>\n                \n                </div>\n                <div class=\"form-group\">\n                    <span>Add Block:</span>\n                    <input type=\"text\" onChange={(e) => setBlockName(e.target.value)} placeholder=\"Block Name\"></input>\n                    <input type=\"url\" onChange={(e) => setBlockUrl(e.target.value)} placeholder=\"Google Sheets URL\"></input>\n                    <button id=\"newBlock\" onClick={addNewBlock}>Add New Block</button>\n                </div>\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default ComplexData\n","import React from 'react';\nimport { Line } from 'react-chartjs-2'\nimport Chart from 'chart.js/auto';\nimport { useState, useEffect } from 'react';\n\n\nfunction AccessoryCharts(){\n    // let liftData = [];\n    let chartlbsorkg = localStorage.getItem('lborkg');\n    let totData = [];\n    \n    let stringTogether = '';\n    const [liftData, setLiftData] = useState('')\n    function plateMath(weight, rpe, reps){\n        const rpeArr = new Object;\n              rpeArr[\"10\"] = 1;\n              rpeArr[\"9.5\"] = 0.978;\n              rpeArr[\"9\"] = 0.955;\n              rpeArr[\"8.5\"] = 0.939;\n              rpeArr[\"8\"] = 0.922;\n              rpeArr[\"7.5\"] = 0.907;\n              rpeArr[\"7\"] = 0.892;\n              rpeArr[\"6.5\"] = 0.878;\n              rpeArr[\"6\"] = 0.863;\n              rpeArr[\"5.5\"] = 0.848;\n              rpeArr[\"5\"] = 0.834;\n\n        const rpeReps = (10 - parseInt(rpe));\n        const totReps = (+rpeReps + +reps);\n        let diffQ = ((100 - (totReps*2.5))/100);\n        let e1rm = weight/diffQ;\n        e1rm = Math.round(e1rm * 100)/100;\n        return e1rm;\n      }\n  //Gets data for lift charts\n    async function getLiftCharts() {\n        console.log(\"charts test\")\n        let block;\n        if(localStorage.getItem('block')){\n            block = localStorage.getItem('block');\n        } else {\n            block = '';\n        }\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n                'block': block,\n            }\n        })\n\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"setting lift data\")\n            setLiftData(data.data, []);\n            createCharts(data.data);\n        } else {\n            alert(data.error + \"loc1\")\n        }\n       \n    }\n    function createCharts(data){\n        let liftArr = []\n        let chartDiv = document.getElementById('accessoryCharts')\n        \n       \n        let e1rm;\n        let chartsArr = [];\n       \n        for(const key in data){\n            let liftData = [];\n            let dates = [];\n            if(data.hasOwnProperty(key)){\n                let curLift = data[key].lift\n                if(curLift == \"Competition Squat\" || curLift == \"Competition Bench\" || curLift == \"Competition Deadlift\"){\n                    continue;\n                }\n                if(!(liftArr.includes(curLift))){\n                    liftArr.push(curLift)\n                    for(const lift in data){\n                        let curWeight;\n                        if(data.hasOwnProperty(lift)){\n                            let compareLift = data[lift].lift\n                            if(compareLift == curLift){\n                                if(dates.includes(data[lift].date)){\n                                    continue;\n                                }\n                                if(chartlbsorkg == 'lb'){\n                                    if(data[lift].lbsorkg == \"kg\"){\n                                        curWeight = toLB(data[lift].weight);\n                                        e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                        liftData.push(e1rm)\n                                        dates.push(data[lift].date) \n                                    }else {\n                                        curWeight = data[lift].weight;\n                                        e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                        liftData.push(e1rm)\n                                        dates.push(data[lift].date) \n                                    }\n                                } else {\n                                    if(data[lift].lbsorkg == \"lb\"){\n                                        curWeight = toKG(data[lift].weight);\n                                        e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                        liftData.push(e1rm)\n                                        dates.push(data[lift].date) \n                                    }else {\n                                        curWeight = data[lift].weight;\n                                        e1rm = plateMath(curWeight,data[lift].rpe,data[lift].reps)\n                                        liftData.push(e1rm)\n                                        dates.push(data[lift].date) \n                                }     \n                            }\n                        }\n                    }\n                    }\n                    const curData = {\n                        labels: dates,\n                        datasets: [{\n                            label: curLift,\n                            data:  liftData,\n                            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                            borderColor: 'rgba(81, 163, 0, 1)',\n                            color: 'rgba(239, 0, 0, 1)',\n                            fill: false,\n                            borderWidth: 1\n                        }]\n                    };  \n                    chartsArr.push(<div><Line class=\"col-xs-6\" data={curData}/></div>)\n\n                    // let newDiv = document.createElement('div')\n                    // newDiv.id = curLift;\n                    // newDiv.innerText = <Line class=\"col-xs-6\" data={totData}/>\n                    // chartDiv.appendChild(newDiv)\n\n                    }\n                }\n            }\n            return chartsArr;\n        }\n    function toKG(weight){\n        return weight/2.2;\n    }\n    function toLB(weight){\n        return weight*2.2;\n    }\n    useEffect(() => {\n        getLiftCharts();\n      }, []);\n        return (\n            <div id=\"accessoryCharts\"style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\",width: \"90vw\", height: \"60vh\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                {createCharts(liftData)}\n            </div>\n\n        );\n}\nexport default AccessoryCharts;","import React, { useEffect } from 'react'\nimport jwt from 'jsonwebtoken'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { useState, useRef } from 'react';\nimport Charts from './charts.component';\nimport Navbar from '../components/navbar.component';\nimport AccessoryCharts from './accessoryCharts.component';\nimport styled, { css } from 'styled-components'\nimport $ from 'jquery';\n// import Button from '/block.style';\n\nconst Block = () => {\n    \n    const name = localStorage.getItem('name');\n    const [lift, setLift] = useState('squat');\n    const [weight, setWeight] = useState('');\n    const [lbsorkg, setLbsorkg] = useState('lb');\n    const [chartlbsorkg, setChartLbsorkg] = useState('');\n    const [reps, setReps] = useState('');\n    const [sets, setSets] = useState('');\n    const [rpe, setRpe] = useState('');\n    const [date, setDate] = useState('');\n    const [totData, setTotData] = useState('');\n    const [note, setNote] = useState('Click here to add a note for the block!')\n    const download = function(data){\n        const blob = new Blob([data], {type: 'text/csv'});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', 'liftdata.csv');\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n\n    }\n\n    function blockNote(e){\n        console.log(e.key)\n        e.preventDefault();\n        let blockNoteIn = document.getElementById(\"blockNoteIn\");\n        let blockNoteShow = document.getElementById(\"blockNoteShow\");\n        if(e.target.id == \"blockNoteShow\"){\n            let prevText = e.target.innerHTML;\n            blockNoteIn.value = prevText;\n\n            blockNoteShow.style.display = \"none\";\n            blockNoteIn.style.display = \"inline\";\n        }\n    }\n\n    function changeLborKg(e){\n        e.preventDefault();\n        localStorage.setItem('lborkg', e.target.value)\n        window.location.reload();\n    }\n\n    function clearTable(){\n        \n    }\n\n    function contentCalculations(){\n        let curData = localStorage.getItem('data');\n        for(const key in curData){\n            if(curData.hasOwnProperty(key)){\n                const curDate = curData[key].date;\n                \n            }\n        }\n    }\n\n    async function createLift() {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        const block = localStorage.getItem('block')\n        let e1rm = plateMath();\n        if(lbsorkg == ''){\n            lbsorkg = 'lb';\n        }\n        const response = await fetch('https://powerprogress.herokuapp.com/api/new_lift', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            email,\n            lift,\n            weight,\n            lbsorkg,\n            reps,\n            sets,\n            rpe,\n            date,\n            e1rm,\n            block,\n            }),\n        })\n    \n        const data = await response.json();\n        // alert(data.status);\n        if(data.status === 'good' || data.status === 'fine' ){\n            alert('Lift added');\n            getLifts();\n            alert('reloading window');\n            window.location.reload();\n        } else{\n            alert(\"Make sure all fields are filled out\");\n        }\n    }\n\n    async function deleteLift(delData) {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        let curLift = delData.lift;\n        let curDate = delData.date;\n        console.log(curLift, curDate);\n        const response = await fetch('https://powerprogress.herokuapp.com/api/delete_lift', {\n        method: 'POST',\n        headers: {\n            'x-access-token': localStorage.getItem('token'),\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            email,\n            curLift,\n            curDate,\n        }),\n        })\n\n        const data = await response.json()\n        console.log(data.status)\n        if(data.status === 'fine'){\n        // alert('Lift deleted')\n        \n        }\n    }\n    \n    async function getLifts() {\n        // let block = localStorage.getItem('block');\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_lift', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n                'block': localStorage.getItem('block')\n            },\n        })\n\n        const data = await req.json();\n       \n        if(data.status === 'fine'){\n            console.log(\"creating list\");\n            console.log(data.data);\n            clearTable();\n            updateTable(data);\n            setTotData(data.data, []);\n            localStorage.setItem('data', data.data)\n        } else {\n            alert(data.error + \"test\")\n        }\n        \n    }\n    async function getAvailableLifts() {\n\n    }\n    async function getNote(){\n        if(!(localStorage.getItem('block'))){\n            return;\n        }\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_note', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n                'block': localStorage.getItem('block'),\n                'email': email,\n            },\n        })\n\n        const noteServ = await req.json();\n       \n        if(noteServ.status === 'fine'){\n            console.log(noteServ.data);\n            setNote(noteServ.newNote, []);\n        } else {\n            alert(noteServ.error)\n        }\n    }\n\n    function logout(){\n        window.localStorage.clear();\n        window.location.href = '/login';\n    }\n\n    function parseData(data){\n        const csvRows = [];\n        const headers = Object.keys(data[0]);\n        csvRows.push(headers.join(','));\n\n        for(const row of data){\n        const values = headers.map(header => {\n            const escaped = (''+row[header]).replace(/\"/g,'\\\\\"');\n            return `${escaped}`\n        });\n        csvRows.push(values.join(','));\n        }\n        return csvRows.join('\\n','');\n    }\n\n    function openSheet(e){\n        let url = localStorage.getItem('url');\n        window.open(url);\n    }\n\n    function plateMath(){\n        const rpeArr = new Object;\n              rpeArr[\"10\"] = 1;\n              rpeArr[\"9.5\"] = 0.978;\n              rpeArr[\"9\"] = 0.955;\n              rpeArr[\"8.5\"] = 0.939;\n              rpeArr[\"8\"] = 0.922;\n              rpeArr[\"7.5\"] = 0.907;\n              rpeArr[\"7\"] = 0.892;\n              rpeArr[\"6.5\"] = 0.878;\n              rpeArr[\"6\"] = 0.863;\n              rpeArr[\"5.5\"] = 0.848;\n              rpeArr[\"5\"] = 0.834;\n        console.log(rpe);\n        if(rpe > 10 || rpe < 5){\n          alert(\"put in a real rpe!\");\n          return;\n        }\n        const rpeReps = (10 - parseInt(rpe));\n        const totReps = (+rpeReps + +reps);\n        let diffQ = ((100 - (totReps*2.5))/100);\n        let e1rm = weight/diffQ;\n        e1rm = Math.round(e1rm * 100)/100;\n        return e1rm;\n    }\n\n    function removeRow (e){\n        if(e.target.id == 'delete'){\n            let row = e.target.closest(\"tr\");\n            let rowNum = row.id;\n            let tempDate = row.querySelector('td').textContent;\n            let tempLift = row.cells[1].textContent;\n            let tempData = {lift : tempLift, date: tempDate};\n    \n            deleteLift(tempData);\n    \n            let tbody = document.getElementById('liftData');\n            tbody.removeChild(row);\n            \n            window.location.reload();\n        }\n    }\n\n    function returnToBlocks(){\n        if(localStorage.getItem('block') != ''){\n            localStorage.removeItem('block')\n            window.location.href = '/blocks'\n        }\n    }\n\n    function saveNote(e){\n        let blockNoteIn = document.getElementById(\"blockNoteIn\");\n        let blockNoteShow = document.getElementById(\"blockNoteShow\");\n        if(e.key === 'Escape'){\n            let prevText = e.target.value;\n            console.log(prevText)\n            blockNoteShow.innerHTML = prevText;\n            setNote(prevText);\n            updateNote(prevText);\n            blockNoteShow.style.display = \"inline\";\n            blockNoteIn.style.display = \"none\";\n            \n        }\n    }\n\n    async function toCSV() {\n        const req = await fetch('https://powerprogress.herokuapp.com/api/getCSV', {\n        headers: {\n            'x-access-token': localStorage.getItem('token')\n        }\n\n    })\n    const data = await req.json();\n    if(data.status === 'fine'){\n        console.log(data.data.data)\n        if(data.data.data == ''){\n        alert(\"You don't have any data\");\n        return;\n        }\n        console.log(parseData(data.data.data));\n        download(parseData(data.data.data));\n        \n    } else {\n        alert(data.error + \"test\")\n    }\n    }\n\n    function tonnageLifted(){\n\n    }\n\n    async function updateNote(newNote) {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        const block = localStorage.getItem('block')\n        if(newNote == ''){\n            newNote = 'Input notes here';\n        }\n        const response = await fetch('https://powerprogress.herokuapp.com/api/update_note', {\n                method: 'POST',\n                headers: {\n                'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                email,\n                block,\n                newNote,\n                }),\n            })\n\n            const data = await response.json();\n            // alert(data.status);\n            if(data.status === 'note updated'){\n                console.log('note updated')\n            } else{\n                alert(data.error);\n            }\n    }\n\n    function updateTable(data){\n    console.log(data)\n    const liftData = data.data;\n    console.log(liftData);\n    const entries = []\n    let firstNode = document.getElementById('liftData');\n        while (firstNode.childNodes.length > 1) {\n        firstNode.removeChild(firstNode.firstChild);\n        }\n        let weight;\n        let e1rm;\n    for(let i = 0; i < liftData.length; i++){\n        \n        if(liftData[i]['lbsorkg'] == 'lb'){\n        weight = parseInt(liftData[i]['weight']);\n        let weightInKg = weight / 2.2;\n        weight = Math.round(weightInKg*100)/100 + 'kg/' + Math.round(weight*100)/100 + 'lbs';\n\n        e1rm = parseInt(liftData[i]['e1rm']);\n        let e1rmInKg = e1rm/2.2;\n        e1rm = Math.round(e1rmInKg*100)/100 + 'kg/' + Math.round(e1rm*100)/100 + 'lbs';\n\n        } else if(liftData[i]['lbsorkg'] == 'kg'){\n        weight = parseInt(liftData[i]['weight'])\n        let weightInLbs = weight * 2.2\n        weight = Math.round(weight*100)/100 + 'kg/' + Math.round(weightInLbs*100)/100 + 'lbs'\n\n        e1rm = parseInt(liftData[i]['e1rm']);\n        let e1rmInLbs = e1rm*2.2;\n        e1rm = Math.round(e1rm*100)/100 + 'kg/' + Math.round(e1rmInLbs*100)/100 + 'lbs';\n        }\n        firstNode.innerHTML += `\n        <tr id=${i}>\n        <td id=\"date\">${liftData[i]['date']}</td>\n        <td id=\"lift\">${liftData[i]['lift']}</td>\n        <td id=\"weight\">${weight}</td>\n        <td id=\"rpe\">${liftData[i]['rpe']}</td>\n        <td id=\"reps\">${liftData[i]['reps']}</td>\n        <td id=\"reps\">${liftData[i]['sets']}</td>\n        <td id=\"e1rm\">${e1rm}</td>\n        <td id=\"delete\"><button id=\"delete\">delete</button></td>\n        </tr>\n        `\n    }\n    }\n\n    useEffect(() => {\n        getLifts();\n        console.log(lbsorkg);\n    }, []);\n    useEffect(() => {\n        getNote();\n        updateNote();\n        console.log(lbsorkg);\n    }, []);\n \n    ////////////////////\n    //  Testing With  //\n    // Google Sheets  //\n    ////////////////////\n\n\n    return (\n        <div>\n            <div id=\"inputBlockData\">\n                <Navbar />\n                <div>\n                    <div>\n                        <h1>Welcome {name}</h1> \n                        <h3>Block: {localStorage.getItem('block')}</h3> \n                        <button onClick={openSheet}>Program Sheet</button>\n                        <br/>\n                        <br/>\n                        <span \n                            id=\"blockNoteShow\" \n                            style={{display: \"inline\", whiteSpace: \"pre-line\", marginLeft: \"10px\", marginTop: \"40px\"}}  \n                            onClick={blockNote}>{note}\n                        </span>\n                        <textarea \n                            id=\"blockNoteIn\" \n                            style={{display: \"none\", width: \"90%\", height: \"50px\", marginLeft: \"10px\", marginTop: \"20px\"}} \n                            onKeyDown={saveNote}/>\n                        \n                </div>\n                <br/>\n                <div class=\"col-sm-2\">\n                    <input type=\"date\" onChange={(e) => setDate(e.target.value)}/>\n                </div>\n                <div class=\"col-sm-2\">\n                    <select onChange={(e) => setLift(e.target.value)}>\n                        <option defaultValue=\"squat\">Squat</option>\n                        <option value=\"bench\">Bench</option>\n                        <option value=\"deadlift\">Deadlift</option>\n                        <option value=\"pause squat\">Pause Squat</option>\n                        <option value=\"pause bench\">Pause Bench</option>\n                        <option value=\"pause deadlift\">Pause Deadlift</option>\n                        <option value=\"leg press\">Leg Press</option>\n                        <option value=\"rdl\">Romanian Deadlift</option>\n                        <option value=\"dumbbell bench\">Dumbbell Bench</option>\n                    </select>\n                    \n                    <input type=\"number\" name=\"weight\" placeholder=\"How much weight?\" step=\"0.25\" onChange={(e) => setWeight(e.target.value)}/>\n                    <select onChange={(e) => setLbsorkg(e.target.value)}>\n                        <option defaultValue=\"lb\">lb</option>\n                        <option value=\"kg\">kg</option>\n                    </select>\n                    </div>\n                    <div class=\"col-sm-2\">\n                    <input type=\"number\" name=\"reps\" placeholder=\"How many reps?\" step=\"1\"  onChange={(e) => setReps(e.target.value)}/>\n                    </div>\n                    <div class=\"col-sm-2\">\n                    <input type=\"number\" name=\"sets\" placeholder=\"How many sets?\" step=\"1\"  onChange={(e) => setSets(e.target.value)}/>\n                    </div>\n                    <div class=\"col-sm-2\">\n                    <input type=\"number\" name=\"rpe\" placeholder=\"What was the RPE?\" step=\"0.5\"  onChange={(e) => setRpe(e.target.value)}/>\n                    </div>\n                    \n                    <div class=\"col-sm-1\">\n                    <input type=\"submit\" value=\"Add Lift\" onClick={createLift}/>\n                    </div>\n                    <div class=\"col-sm-1\">\n                    <input type=\"submit\" value=\"Download CSV\" onClick={toCSV}/>\n                    </div>\n                </div>\n                <div class=\"table-wrapper-scroll-y my-custom-scrollbar\">\n                    <table class=\"table\" id=\"dataTable\" onClick={removeRow}>\n                    <thead>\n                        <tr>\n                        <th>Date</th>\n                        <th>Lift</th>\n                        <th>Weight</th>\n                        <th>Rpe</th>\n                        <th>Reps</th>\n                        <th>Sets</th>\n                        <th>Estimated 1rm</th>\n                        <th>Delete</th>\n                        </tr>\n                    </thead>\n                        <tbody id=\"liftData\">\n\n                        </tbody>\n                        <tbody id='startHere'>\n\n                        </tbody>\n                    </table>\n                </div>\n                \n                <br />\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    Chart Weight in &nbsp; \n                                    <select defaultValue={localStorage.getItem('lborkg')} onChange={(e) => changeLborKg(e)}>\n                                        <option value=\"lb\">lb</option>\n                                        <option value=\"kg\">kg</option>\n                                    </select>\n                </div>\n                <div>\n                    <h2>Big 3</h2>\n                    <Charts />\n                </div>\n                <div>\n                    <h1>Accessories</h1>\n                    <AccessoryCharts />\n                </div>\n                <div>\n                    <h1>Lift Calculations</h1>\n                    <div className=\"calculationsTable\"></div>\n                </div>\n                \n            </div>\n            <div id=\"googleSheetstesting\">\n\n\n            </div>\n                \n        </div>\n    )\n}\n\nexport default Block\n","import React, { useRef, useEffect, useState } from \"react\";\nimport jspreadsheet from \"jspreadsheet-ce\";\nimport jwt from 'jsonwebtoken'\nimport \"../../node_modules/jspreadsheet-ce/dist/jspreadsheet.css\";\nimport Navbar from '../components/navbar.component'\n\n\nexport default function App() {\n\n    const jRef = useRef(null);\n    const [numRows, setNumRows] = useState(15);\n    const [numCols, setNumCols] = useState(15);\n    const [data, setData] = useState([[]]);\n\n    async function getSheet(){\n        if(!localStorage.getItem('block')){\n            return;\n        }\n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_sheet', {\n                headers: {\n                    'x-access-token': localStorage.getItem('token'),\n                    'block': localStorage.getItem('block')\n                },\n            })\n\n            const sheetData = await req.json();\n            if(sheetData.status === 'fine'){\n                let newData = await sheetData.data.sheetData;\n                newData = JSON.parse(newData);\n                setData(newData)\n            \n                const options = {\n                    data: newData,\n                    minDimensions: [numRows, numCols]\n                };\n                if (!jRef.current.jspreadsheet) {\n                    jspreadsheet(jRef.current, options);\n                    }\n                console.log(newData);\n            } else {\n                alert(sheetData.error + \"test\")\n            }\n    }\n\n    useEffect(() => {\n        getSheet();\n    }, [])\n\n    const addRow = () => {\n        jRef.current.jexcel.insertRow();\n        setNumRows(+numRows + 1) \n    };\n    const addCol = () => {\n        jRef.current.jexcel.insertColumn();\n        setNumCols(+numCols + 1) \n    };\n    const removeRow = () => {\n        jRef.current.jexcel.deleteRow();\n        if(numRows > 1){\n            setNumRows(numRows - 1) \n        } else{\n            return;\n        }\n    };\n    const removeCol = () => {\n        jRef.current.jexcel.deleteColumn();\n        if(numCols > 1){\n            setNumCols(numCols - 1) \n        } else {\n            return;\n        }\n        \n    };\n    async function updateTable() {\n        let sheetData = JSON.stringify(jRef.current.jexcel.getData())\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        const block = localStorage.getItem('block')\n        console.log(email, block, sheetData)\n        const response = await fetch('https://powerprogress.herokuapp.com/api/update_sheet', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            email,\n            block,\n            sheetData,\n            }),\n        })\n\n        const data = await response.json();\n        console.log(data)\n        // alert(data.status);\n        if(data.status === 'sheet updated'){\n            alert('SheetUpdated');\n        } else{\n            alert(\"Something went wrong\" + data.error);\n        }\n\n    }\n    function plateMath(rpe, reps, weight){\n        const rpeArr = new Object;\n              rpeArr[\"10\"] = 1;\n              rpeArr[\"9.5\"] = 0.978;\n              rpeArr[\"9\"] = 0.955;\n              rpeArr[\"8.5\"] = 0.939;\n              rpeArr[\"8\"] = 0.922;\n              rpeArr[\"7.5\"] = 0.907;\n              rpeArr[\"7\"] = 0.892;\n              rpeArr[\"6.5\"] = 0.878;\n              rpeArr[\"6\"] = 0.863;\n              rpeArr[\"5.5\"] = 0.848;\n              rpeArr[\"5\"] = 0.834;\n        if(rpe > 10 || rpe < 5){\n          alert(\"put in a real rpe!\");\n          return;\n        }\n        const rpeReps = (10 - parseInt(rpe));\n        const totReps = (+rpeReps + +reps);\n        let diffQ = ((100 - (totReps*2.5))/100);\n        let e1rm = weight/diffQ;\n        e1rm = Math.round(e1rm * 100)/100;\n        return e1rm;\n    }\n    async function createLift(lift, sets, weight, lbsorkg, reps, rpe, date) {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        const block = localStorage.getItem('block')\n        let e1rm = plateMath(rpe, reps, weight);\n        if(lbsorkg == ''){\n            lbsorkg = 'lb';\n        }\n        const response = await fetch('https://powerprogress.herokuapp.com/api/new_lift', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            email,\n            lift,\n            weight,\n            lbsorkg,\n            reps,\n            sets,\n            rpe,\n            date,\n            e1rm,\n            block,\n            }),\n        })\n    \n        const data = await response.json();\n        // alert(data.status);\n        if(data.status === 'good' || data.status === 'fine' ){\n            console.log(\"lifts added to mongo\")\n        } else{\n            console.log(data.status);\n        }\n    }\n    async function addLiftToLibrary(lift) {\n        const token = localStorage.getItem('token')\n        const decoded = jwt.verify(token, 'secret123')\n        const email = decoded.email\n        console.log(lift)\n        const response = await fetch('https://powerprogress.herokuapp.com/api/lift_list', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n            email,\n            lift,\n            }),\n        })\n\n        const data = await response.json();\n        if(data.status === 'good'){\n            console.log('Lift added' + lift);\n        } else{\n            // console.log(\"Lift exists\");\n            return;\n        }\n\n    }\n    function enterBlock(e){\n        if(e.target.id == \"populatedBlocks\"){\n            return;\n        }\n        let blockName = e.target.value;\n        if(localStorage.getItem('block') != ''){\n            localStorage.removeItem('block');\n            localStorage.setItem('block', blockName);\n            console.log(localStorage.getItem('block'))\n            getSheet();\n\n        } else{\n            localStorage.setItem('block', blockName);\n            console.log(localStorage.getItem('block'))\n            getSheet();\n        }\n    }\n    async function populateBlocks(){\n            \n        const req = await fetch('https://powerprogress.herokuapp.com/api/get_blocks', {\n            headers: {\n                'x-access-token': localStorage.getItem('token'),\n            }\n        \n        })\n        const data = await req.json();\n        if(data.status === 'fine'){\n            console.log(\"populating blocks\");\n            let totData = data.blocks;\n            console.log(totData)\n            let blockList = [];\n            let blockDiv = document.getElementById(\"populatedBlocks\");\n            let newBlockButton = document.getElementById(\"newBlock\");\n            for(let key in totData){\n                console.log(key)\n                if(totData.hasOwnProperty(key)){\n                    let curBlock = totData[key].blockName\n                    console.log(curBlock)\n                    if(blockList.includes(curBlock)){\n                        continue;\n                    } else{\n                        blockList.push(curBlock);\n                        const newBlock = document.createElement('button');\n                        newBlock.id = totData[key.sheetURL];\n                        newBlock.value = curBlock;\n                        newBlock.innerHTML = curBlock;\n                        blockDiv.prepend(newBlock);\n                    }\n                }\n            }\n\n\n        } else {\n            alert(data.error + \"test\")\n        }\n    }\n    useEffect(() =>{\n        populateBlocks();\n    }, [])\n\n    function searchThroughData(e){\n        let totObj = []\n        let curObj = {};\n        let liftArr = [];\n        let setsArr = [];\n        let repsArr = [];\n        let rpeArr = [];\n        let lbsorkgArr = [];\n        let weightArr = [];\n        let datesArr = [];\n        let curLiftArr = [];\n\n        console.log(data.length)\n        for(let i = 0; i <data.length; i++){\n            let curRow = jRef.current.jexcel.getRowData(i)\n\n            if(i === 0){\n                for(let j = 0; j <= curRow.length; j++){\n                    if(curRow[j] === \"Lift\"){\n                        liftArr.push(j);\n                    }else if(curRow[j] === \"Sets\"){\n                        setsArr.push(j);\n                    }else if(curRow[j] === \"Reps\"){\n                        repsArr.push(j);\n                    }else if(curRow[j] === \"Weight\"){\n                        weightArr.push(j);\n                    }else if(curRow[j] === \"RPE\"){\n                        rpeArr.push(j);\n                    }else if(curRow[j] === \"Date\"){\n                        datesArr.push(j);\n                    }else if(curRow[j] === \"Lbs or KG\"){\n                        lbsorkgArr.push(j);\n                    }\n                }\n            }\n            let curLift;\n            let curSets;\n            let curReps;\n            let curWeight;\n            let curRPE;\n            let curDate;\n            let curLbsorKg;\n            for(let j=0; j< curRow.length; j++){\n\n                // console.log(curLiftArr)\n                    if(curLift && curSets && curReps && curWeight && curRPE && curDate && curLbsorKg){\n                        continue;\n                    }\n                    if(liftArr.includes(j)){\n                        curLift = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(setsArr.includes(j)){\n                        curSets = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(repsArr.includes(j)){\n                        curReps = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(weightArr.includes(j)){\n                        curWeight = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(rpeArr.includes(j)){\n                        curRPE = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(lbsorkgArr.includes(j)){\n                        curLbsorKg = jRef.current.jexcel.getCell([j,i]).innerHTML\n                    } else if(datesArr.includes(j)){\n                        curDate = jRef.current.jexcel.getCell([j,i]).innerHTML\n                        if(curLift != \"Lift\"  && curLift != '' && curSets != '' && curReps != '' && curWeight != '' && curRPE != '' && curDate != '' && curLbsorKg != ''){\n                            console.log(curLift, curSets, curReps, curWeight, curRPE, curDate, curLbsorKg)\n                            createLift(curLift, curSets, curWeight, curLbsorKg, curReps, curRPE, curDate);\n                            if(!curLiftArr.includes(curLift)){\n                                curLiftArr.push(curLift)\n                                addLiftToLibrary(curLift);\n                            } \n                            curLift = '';\n                            curSets = '';\n                            curReps = '';\n                            curWeight = '';\n                            curRPE = '';\n                            curDate = '';\n                        } \n                    }\n                // if(curLift != undefined && curSets != undefined && curReps != undefined && curWeight != undefined && curRPE != undefined && curDate != undefined && curLift != '' && curRPE != '' && curReps != '' && curWeight != '' && curSets != '' && curDate != ''){\n                //     console.log(curLift, curSets, curReps, curWeight, curRPE, curDate)\n                // }\n            }\n        }\n    }\n    return (\n        <div>\n            <Navbar/>\n        <div id=\"blocksList\">\n            <h2>Block List</h2>\n                <div id=\"populatedBlocks\" onClick={enterBlock}>\n                \n                </div>\n        </div>\n\n        <input type=\"button\" onClick={addRow} value=\"Add new row\" />\n        <input type=\"button\" onClick={addCol} value=\"Add new column\" />\n        <input type=\"button\" onClick={removeRow} value=\"Remove row\" />\n        <input type=\"button\" onClick={removeCol} value=\"Remove column\" />\n        <input type=\"button\" onClick={updateTable} value=\"update mongo\" />\n        <input type=\"button\" onClick={searchThroughData} value=\"Testing\" />\n        <br/>\n        <div ref={jRef}/>\n        <br />\n        </div>\n    );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom';\n\nimport Login from './pages/login';\nimport Register from './pages/register';\nimport Dashboard from './pages/dashboard';\nimport Example from './pages/example';\nimport ComplexData from './pages/blocks';\nimport Block from './pages/block';\nimport Sheet from './pages/programSheet';\n// import Navbar from './components/navbar'\nconst App = () => {\n    return(\n        <div>\n            <Router>\n                <Routes>\n                    <Route path='/' exact element={<Login />} />\n                    <Route path=\"/login\" exact element={<Login />}/>\n                    <Route path=\"/register\" exact element={<Register />}/>\n                    <Route path=\"/dashboard\" exact element={<Dashboard />}/>\n                    <Route path=\"/example\" exact element={<Example />}/>\n                    <Route path=\"/blocks\" exact element={<ComplexData />}/>\n                    <Route path=\"/block\" exact element={<Block />}/>\n                    <Route path=\"/programSheet\" exact element={<Sheet />}/>\n                </Routes>\n            </Router>\n        </div>\n    )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}